using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using FashionAde.ApplicationServices;
using FashionAde.ApplicationServices.SearchEngine;
using FashionAde.Core;
using FashionAde.Core.Accounts;
using FashionAde.Core.Clothing;
using FashionAde.Core.DataInterfaces;
using FashionAde.Core.Views;
using FashionAde.Core.UserCloset;
using FashionAde.Web.Controllers.MVCInteraction;
using SharpArch.Web.NHibernate;

namespace FashionAde.Web.Controllers
{
    public class RatingController : BaseController
    {
        private IFriendRatingInvitationRepository friendRatingInvitationRepository;
        private IClosetOutfitRepository closetOutfitRepository;
        private IMessageSenderService messageSenderService;
        private IRegisteredUserRepository registeredUserRepository;
        private IOutfitUpdaterRepository outfitUpdaterRepository;
        
        public RatingController(IFriendRatingInvitationRepository friendRatingInvitationRepository, IClosetOutfitRepository closetOutfitRepository, IMessageSenderService messageSenderService, IRegisteredUserRepository registeredUserRepository, IOutfitUpdaterRepository outfitUpdaterRepository)
        {
            this.friendRatingInvitationRepository = friendRatingInvitationRepository;
            this.closetOutfitRepository = closetOutfitRepository;
            this.messageSenderService = messageSenderService;
            this.registeredUserRepository = registeredUserRepository;
            this.outfitUpdaterRepository = outfitUpdaterRepository;
        }

        /// <summary>
        /// Vote from an existing invitation in the system.
        /// </summary>
        /// <param name="id">Invitation Code</param>
        [HttpGet]
        public ActionResult VoteFromInvitation(Guid id)
        {
            FriendRatingInvitation invitation = friendRatingInvitationRepository.GetByKey(id.ToString());

#if !DEBUG
            if (!IsValidInvitation(invitation))
                return RedirectToAction("Index", "Home");
#endif

            ClosetOutfitView cv = closetOutfitRepository.GetByClosetOutfitId(invitation.ClosetOutfit.Id);

            FriendRatingView viewData = LoadViewData(new FriendRatingView(), cv, 0);
            return View("Vote", viewData);
        }

        /// <summary>
        /// Vote for a public closet outfit. No previous invitation may exist.
        /// </summary>
        /// <param name="id">Closet Outfit Id</param>
        [HttpGet]
        public ActionResult Vote(int id)
        {
            ClosetOutfitView cv = closetOutfitRepository.GetByClosetOutfitId(id);
            if (cv == null)
                return RedirectToAction("Index","Home");

            FriendRatingView viewData = LoadViewData(new FriendRatingView(), cv, 0);
            return View(viewData);
        }

        private FriendRatingView LoadViewData(FriendRatingView viewData, ClosetOutfitView closetOutfitView, int invitationId)
        {
            viewData.ClosetOutfit = closetOutfitView;
            viewData.Updater = outfitUpdaterRepository.GetRandomOutfitUpdaterFor(closetOutfitView.PreCombination);
            viewData.InvitationId = invitationId;
            viewData.ClosetOutfitId = closetOutfitView.ClosetOutfitId;
            viewData.UserName = closetOutfitView.ClosetOutfit.Closet.User.FullName;
            return viewData;
        }

        /// <summary>
        /// Saves the friend vote into the system
        /// </summary>
        [AcceptVerbs(HttpVerbs.Post)]
        [Transaction]
        public ActionResult Vote(FriendRatingView view)
        {
            if (ModelState.IsValid)
            {
                FriendRatingInvitation invitation;

                // Check if this is a new invitation from an anonymous user
                if (view.InvitationId == 0)
                {
                    invitation = new FriendRatingInvitation();
                    invitation.ClosetOutfit = closetOutfitRepository.Get(view.ClosetOutfitId);
                    invitation.User = invitation.ClosetOutfit.Closet.User;

                    invitation.FriendEmail = "Generated by FaceBook";
                    invitation.KeyCode = string.Empty;
                    invitation.InvitationSentOn = DateTime.Today;
                }
                else
                {
                    invitation = friendRatingInvitationRepository.Get(view.InvitationId);
                    if (!IsValidInvitation(invitation))
                        return RedirectToAction("Index", "Home");
                }
                
                invitation.Rate = view.FriendRating;
                invitation.FriendRateOn = DateTime.Now;
                invitation.Message = "";
                if (!string.IsNullOrEmpty(view.Comment))
                    //invitation.Message = HttpUtility.HtmlEncode(view.Comment);
                    invitation.Message = view.Comment;

                ClosetOutfit closetOutfit = closetOutfitRepository.Get(view.ClosetOutfitId);
                closetOutfit.Rating.Rate(view.FriendRating, invitation);
                closetOutfitRepository.SaveOrUpdate(closetOutfit);

                using (SearchEngineService ses = SearchEngineService.GetByCloset(ClosetId))
                    ses.AddEntry(closetOutfit.ToSearchEngineEntry());

                friendRatingInvitationRepository.SaveOrUpdate(invitation);

                ConfirmRatingData data = new ConfirmRatingData
                {
                    Components = closetOutfit.Components,
                    Comments = HttpUtility.HtmlEncode(view.Comment),
                    GarmentsUri = Resources.GetGarmentLargePath(),
                    RatingImg = Resources.GetRatingLargePath() + view.FriendRating + ".jpg",
                    RatingText = Resources.GetRatingText(view.FriendRating)
                };

                messageSenderService.SendWithTemplate("confirmrating", invitation.User, data, invitation.User.EmailAddress);
                return RedirectToAction("Thanks");
            }

            ClosetOutfitView cv = closetOutfitRepository.GetByClosetOutfitId(view.ClosetOutfitId);
            view = LoadViewData(view, cv, 0);

            return View(view);
        }

        private bool IsValidInvitation(FriendRatingInvitation invitation)
        {
            if (invitation == null || invitation.User.Id == this.UserId)
                return false;

            if (invitation.FriendRateOn > invitation.InvitationSentOn || invitation.Rate > 0)
                return false;

            return true;
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Thanks()
        {
            ViewData["UserName"] = User.Identity.Name;
            return View();
        }

        internal class ConfirmRatingData
        {
            public string Comments { get; set; }
            public IList<Garment> Components { get; set; }
            public string GarmentsUri { get; set; }
            public string RatingImg { get; set; }
            public string RatingText { get; set; }
        }
    }


}
